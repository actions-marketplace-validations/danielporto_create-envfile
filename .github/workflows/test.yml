name: Test action

on: [ push ]

jobs:
  test-general:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # TODO           envkey_SOME_API_KEY_LITERAL_ this entry fails. is sorted before envkey_SOME_API_KEY
      - name: Make envfile
        uses: ./
        with:
          envkey_DEBUG: false
          envkey_SOME_API_KEY: "123456abcdef"
          envkey_SOME_API_KEYLITERAL_: "123456abcdef"
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_CONTENT_IS_VAR: "$ENVVAR"
          envkey_10_A_PRIORITIZED_KEY: "lorem"
          envkey_3_ANOTHER_PRIORITIZED_KEY: "ipsum"
          envkey_5_PRIORITIZED_KEY_VALUE_WITH_SPACES: "lorem ipsum"
          envkey_1_ONE_MORE_PRIORITIZED_KEY: true
          jsonkey_JVARKEY: '[{"key": "JVARKEY",	"value": "VARVALUE"}, {	"key": "JVARKEY1",	"value": "VARVALUE1"}, {	"key": "JVARKEY2",	"value": "VARVALUE2"}]'
          jsonkey_1_JVARKEY1: '[{"key": "JVARKEY",	"value": "VARVALUE"}, {	"key": "JVARKEY1",	"value": "VARVALUE1"}, {	"key": "JVARKEY2",	"value": "VARVALUE2"}]'
          jsonkey_JVARKEYSPACE: '[{"key": "JVARKEY",	"value": "VARVALUE"}, {	"key": "JVARKEY1",	"value": "VARVALUE1"}, {	"key": "JVARKEYSPACE",	"value": "VAR KEY SPACE"}]'
          jsonkey_JVARKEYVAR: '[{"key": "JVARKEY",	"value": "VARVALUE"}, {	"key": "JVARKEY1",	"value": "VARVALUE1"}, {	"key": "JVARKEYVAR",	"value": "$VAR"}]'
          jsonkey_JVARKEYLITERAL_: '[{"key": "JVARKEY",	"value": "VARVALUE"}, {	"key": "JVARKEY1",	"value": "VARVALUE1"}, {	"key": "JVARKEYLITERAL",	"value": "$VA%%%R"}]'
          some_other_variable: foobar
          file_name: .env


      - name: Verify envfile
        run: |
            rm -f .env-expected 
            echo 'JVARKEY1=VARVALUE1' >> .env-expected 
            echo 'ONE_MORE_PRIORITIZED_KEY=true' >> .env-expected 
            echo 'ANOTHER_PRIORITIZED_KEY=ipsum' >> .env-expected 
            echo 'PRIORITIZED_KEY_VALUE_WITH_SPACES="lorem ipsum"' >> .env-expected 
            echo 'A_PRIORITIZED_KEY=lorem' >> .env-expected 
            echo 'CONTENT_IS_VAR="$ENVVAR"' >> .env-expected 
            echo 'DEBUG=false' >> .env-expected 
            echo 'JVARKEY=VARVALUE' >> .env-expected 
            echo "JVARKEYLITERAL='\$VA%%%R'" >> .env-expected 
            echo 'JVARKEYSPACE="VAR KEY SPACE"' >> .env-expected 
            echo 'JVARKEYVAR="$VAR"' >> .env-expected 
            echo 'SECRET_KEY=password123' >> .env-expected 
            echo 'SOME_API_KEY=123456abcdef' >> .env-expected 
            echo "SOME_API_KEYLITERAL='123456abcdef'" >> .env-expected 

            EXPECTED_ENV_HASH=$(md5sum .env-expected | cut -d " " -f 1)
            echo $EXPECTED_ENV_HASH
            GENERATED_ENV_HASH=$(md5sum .env | cut -d " " -f 1)
            echo $GENERATED_ENV_HASH
            if [ "${GENERATED_ENV_HASH}" != "${EXPECTED_ENV_HASH}" ]; then
                echo "FAILURE"
                echo "EXPECTED x GENERATED ----------------------------------------------------------"
                diff -y .env-expected .env
                exit 1
            else
              echo "SUCCESS ----------------------------------------------------------"
              cat .env
            fi
  test-filename:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Make envfile
        uses: ./
        with:
          envkey_DEBUG: false
          file_name: .other-file

      - name: Verify envfile
        run: |
          TEST=$(cat <<-END
            DEBUG=false
          END
          )
          if [ "$TEST" != "$(cat .other-file)" ]
          then
              echo "ERR"
          fi

  test-relative-path-above:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Make envfile
        uses: ./
        with:
          envkey_DEBUG: false
          directory: ../

      - name: Verify envfile
        run: |
          TEST=$(cat <<-END
            DEBUG=false
          END
          )
          if [ "$TEST" != "$(cat ../.env)" ]
          then
              echo "ERR"
          fi

  test-relative-path-subdirectory-1:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create folder
        run: |
          mkdir -p subdir

      - name: Make envfile
        uses: ./
        with:
          envkey_DEBUG: false
          directory: subdir

      - name: Verify envfile
        run: |
          TEST=$(cat <<-END
            DEBUG=false
          END
          )
          if [ "$TEST" != "$(cat subdir/.env)" ]
          then
              echo "ERR"
          fi

  test-relative-path-subdirectory-2:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create folder
        run: |
          mkdir -p subdir

      - name: Make envfile
        uses: ./
        with:
          envkey_DEBUG: false
          directory: ./subdir

      - name: Verify envfile
        run: |
          TEST=$(cat <<-END
            DEBUG=false
          END
          )
          if [ "$TEST" != "$(cat subdir/.env)" ]
          then
              echo "ERR"
          fi

  should-fail-test-absolute-path:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create folder
        run: |
          mkdir -p subdir

      - name: Make envfile
        uses: ./
        with:
          envkey_DEBUG: false
          directory: /home

  should-fail-test-bad-secret:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create folder
        run: |
          mkdir -p subdir

      - name: Make envfile
        uses: ./
        with:
          fail_on_empty: true
          envkey_SECRET_KEY: ${{ secrets.NON_EXISTENT_SECRET }}

  # Test empty envkeys
  should-fail-test-empty-envkey:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create folder
        run: |
          mkdir -p subdir

      - name: Make envfile
        uses: ./
        with:
          envkey_SECRET_KEY: ""
          fail_on_empty: true

  test-empty-envkey-default-option:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create folder
        run: |
          mkdir -p subdir

      - name: Make envfile
        uses: ./
        with:
          envkey_SECRET_KEY: ""

      - name: Verify envfile
        run: |
          TEST=$(cat <<-END
            SECRET_KEY=
          END
          )
          if [ "$TEST" != "$(cat .env)" ]
          then
              echo "ERR"
          fi
